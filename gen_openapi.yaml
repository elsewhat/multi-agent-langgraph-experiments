openapi: 3.1.0
info:
  title: Bowlerama API
  version: 1.0.0
  description: A RESTful API for interacting with bowling frame data in a ten-pin bowling game.
  contact:
    name: Bowlerama Support
    url: https://bowlerama.com/support
    email: support@bowlerama.com

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: Frames
    description: Operations related to bowling frames
  - name: Audits
    description: Operations related to audit records for frame changes

paths:
  /frames:
    get:
      summary: Retrieve a list of frames for a specific game.
      description: Returns an array of frame objects representing the bowling game's frames, along with relevant metadata (bowlerId and gameId).
      tags:
        - Frames
      operationId: getFramesForGame
      parameters:
        - in: query
          name: bowlerId
          required: true
          schema:
            type: integer
            format: int32
            description: The identifier of the bowler for whom the frames are being retrieved.
        - in: query
          name: gameId
          required: true
          schema:
            type: integer
            format: int32
            description: The identifier of the game for which the frames are being retrieved.
      responses:
        '200':
          description: A list of frames for the given game.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Frame'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      summary: Create a new frame in a specific game.
      description: Accepts a JSON body representing the new frame to be created, and returns the newly created frame object.
      tags:
        - Frames
      operationId: createFrameInGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFrameRequest'
      responses:
        '201':
          description: The newly created frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frame'
        '400':
          $ref: '#/components/responses/BadRequestError'

    delete:
      summary: Delete all frames of a specific game.
      description: Removes all existing frame data for the specified bowlerId and gameId. Returns a 204 No Content status code if successful.
      tags:
        - Frames
      operationId: deleteFramesOfGame
      parameters:
        - in: query
          name: bowlerId
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: gameId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Frames deleted successfully.
        '404':
          $ref: '#/components/responses/NotFoundError'

  /frames/{frameNumber}:
    get:
      summary: Retrieve a specific frame by its number in a game.
      description: Retrieves the detailed information of the specified frame within the bowling game, including relevant metadata (bowlerId and gameId).
      tags:
        - Frames
      operationId: getFrameByNumber
      parameters:
        - in: path
          name: frameNumber
          required: true
          schema:
            type: integer
            format: int32
            description: The identifier of the frame to retrieve.
        - in: query
          name: bowlerId
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: gameId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frame'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update an existing frame in a game.
      description: Accepts a JSON body representing the updated frame data, and returns the updated frame object.
      tags:
        - Frames
      operationId: updateFrame
      parameters:
        - in: path
          name: frameNumber
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFrameRequest'
      responses:
        '200':
          description: The updated frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frame'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete a specific frame from a game.
      description: Removes the specified frame from the bowling game, and returns a 204 No Content status code if successful.
      tags:
        - Frames
      operationId: deleteFrameFromGame
      parameters:
        - in: path
          name: frameNumber
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Frame deleted successfully.
        '404':
          $ref: '#/components/responses/NotFoundError'

  /audits:
    get:
      summary: Retrieve all audit records for frames in a game.
      description: Returns an array of audit records representing the changes made to frame data within the bowling game, including relevant metadata (bowlerId and gameId).
      tags:
        - Audits
      operationId: getFrameAudits
      parameters:
        - in: query
          name: bowlerId
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: gameId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An array of audit records for the given game.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrameAudit'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  responses:
    NotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    BadRequestError:
      description: Invalid request data.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

  schemas:
    Frame:
      type: object
      properties:
        bowlerId:
          type: integer
          format: int32
          readOnly: true
        gameId:
          type: integer
          format: int32
          readOnly: true
        frameNumber:
          type: integer
          format: int32
          readOnly: true
        strike:
          type: string
          maxLength: 1
        spare:
          type: string
          maxLength: 1
        score:
          type: integer
          format: int32

    NewFrameRequest:
      allOf:
        - $ref: '#/components/schemas/Frame'
      required: [frameNumber, strike, spare, score]

    UpdateFrameRequest:
      allOf:
        - $ref: '#/components/schemas/Frame'
      required: [strike, spare, score]
      properties:
        frameNumber:
          type: integer
          format: int32
          readOnly: true

    FrameAudit:
      type: object
      properties:
        bowlerId:
          type: integer
          format: int32
        gameId:
          type: integer
          format: int32
        frameNumber:
          type: integer
          format: int32
        oldStrike:
          type: string
          maxLength: 1
        newStrike:
          type: string
          maxLength: 1
        oldSpare:
          type: string
          maxLength: 1
        newSpare:
          type: string
          maxLength: 1
        oldScore:
          type: integer
          format: int32
        newScore:
          type: integer
          format: int32
        changeDate:
          type: string
          format: date-time
        operation:
          type: string
          enum: ['CREATE', 'UPDATE', 'DELETE']